import React, { Component } from 'react';
import PropTypes from 'prop-types';
import './DatabaseEntity.css';
import EditableItem from '../EditableItem/EditableItem';

/**
* Used to display a database entity record (entities from an instance of FilterableSchemaList)
*
*@component
 */
class DatabaseEntity extends Component
{
	/**
	* Callback for an array map function. Maps entities into LI elements
	* @param {object} childEntity - The entity to be placed in an LI element
	* @param {number} index - The index of the entity in its respective array
	* @return {jsx} The given entity, within an LI element
	 */
	childEntityToLiMapper(childEntity, index)
	{
		return (<li key={"dbEntityList-" + index}>{childEntity}</li>);
	}
	
	/** Render the DatabaseEntity */
	render()
	{
		const colorStyles = {
			backgroundColor: this.props.color
		};
		
		const componentClassName = "DatabaseEntity";
		const matchClassName = "matchingDatabaseEntity";
		const classList = 
			(this.props.isMatch) ? `${componentClassName} ${matchClassName}` : componentClassName;
		
		return (
			<div className={classList} style={colorStyles} id={this.props.elementID}>
				<h1 className={"dbEntityName"}>{this.props.name}</h1>
				
				<div className="entityDescription entityDetailLine">
					<label>Description: </label>
					<EditableItem 
						text={this.props.description} 
						saveChanges={this.props.saveDescriptionChanges} 
						saveErrorHandler={this.props.saveDescriptionErrorHandler} 
						textLengthLimit={this.props.descriptionCharLengthLimit} />
				</div>
				
				{this.props.fkToSchemaTableName && 
					<div className="fkToTableInfo entityDetailLine">
						<label className="fkToTableLabel">Foreign key to table: </label>
						<span className="fkToTableName">{this.props.fkToSchemaTableName}</span>
					</div>
				}
				
				{(React.Children.toArray(this.props.children).length > 0) && 
				<ul>
					{React.Children.map(this.props.children, this.childEntityToLiMapper.bind(this))}
				</ul>}
			</div>
		);
	}
}

DatabaseEntity.propTypes = {
	/**
	* The ID for this component's root element (generated by EntityElementIdGenerator). This allows 
	* anchor tags to point to this element
	 */
	elementID: PropTypes.string.isRequired,
	
	/**
	* The name of the entity
	 */
	name: PropTypes.string.isRequired,
	
	/**
	* The description of the entity
	 */
	description: PropTypes.string.isRequired,
	
	/**
	* The CSS-ready hex-color code for this entity type
	 */
	color: PropTypes.string.isRequired,
	
	/**
	* Is this entity a match to the current filter?
	 */
	isMatch: PropTypes.bool,
	
	/**
	* If this is a column that is an FK to a table, the schema and table name is provided through 
	* this, seperated by a period. This string should be formatted as: mySchema.myTable
	 */
	fkToSchemaTableName: PropTypes.string,
	
	/**
	* An async function to call, in order to save changes to the entity's description
	* @param {string} newDesc - The new description for this entity
	 */
	saveDescriptionChanges: PropTypes.func.isRequired,
	
	/**
	* A callback function to call, if there's an error when saving a description
	 */
	saveDescriptionErrorHandler: PropTypes.func.isRequired,
	
	/**
	* The character limit for entity descriptions
	 */
	descriptionCharLengthLimit: PropTypes.number.isRequired
};

export default DatabaseEntity;